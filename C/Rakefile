require 'rake/clean'
CLEAN.include('*.elf')
CLOBBER.include('*.hex')

# Configuration
ARDUINO = "/Applications/Electronics/arduino-0012"
F_CPU = "16000000"
MMCU = "atmega168"
SERIAL = "/dev/tty.usbserial-A60061eR"

# No more changes

C_SRC = FileList['*.c']
ELF = C_SRC.ext('elf')
HEX = C_SRC.ext('hex')

# COMMANDS
AVR_TOOLS_PATH = "#{ARDUINO}/hardware/tools/avr/bin"
AVR_GCC = "#{AVR_TOOLS_PATH}/avr-gcc"
AVR_OBJCOPY = "#{AVR_TOOLS_PATH}/avr-objcopy"
AVR_DUDE = "#{AVR_TOOLS_PATH}/avrdude"

# FLAGS
CWARN = "-Wall -Wstrict-prototypes"
CTUNING = "-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums"
CFLAGS = "-mmcu=#{MMCU} #{CTUNING} -I. -gstabs -DF_CPU=#{F_CPU} -Os #{CWARN} -std=gnu99 -I#{ARDUINO}/hardware/cores/arduino"

task :default => [:all]


rule '.elf' => '.c' do |t|
    puts " => [avr-gcc] #{t.name}"
    sh "#{AVR_GCC} #{CFLAGS} -o #{t.name} #{t.source}  -L. core.a -lm"
end

rule '.hex' => '.elf' do |t|
    puts " => [avr-objcopy] #{t.name}"
    sh "#{AVR_OBJCOPY} -O ihex -R .eeprom #{t.source} #{t.name}"
end

desc "Build all Modules"
task :all => HEX 

desc "Upload module (USAGE: 'rake module.hex upload')"
task :upload do |t|
    if (ARGV[0] == "upload") then
        puts "USAGE: 'rake module.hex upload'"
    else
        Rake::Task[ARGV[0]]
        puts " => [avrdude] #{ARGV[0]}"
        sh "#{AVR_DUDE} -p #{MMCU} -P #{SERIAL} -C #{ARDUINO}/hardware/tools/avr/etc/avrdude.conf -c stk500v1 -b 19200 -F -u -U flash:w:#{ARGV[0]}"
    end
    
    
end

desc "Build the core.a file for linking"
task :bootstrap do
    sh "avr-gcc -M -mmcu=#{MMCU} -DF_CPU=#{F_CPU} -I#{ARDUINO}/hardware/cores/arduino -I#{ARDUINO}/hardware/libraries/SoftwareSerial \
        #{ARDUINO}/hardware/cores/arduino/pins_arduino.c \
        #{ARDUINO}/hardware/cores/arduino/wiring.c \
        #{ARDUINO}/hardware/cores/arduino/wiring_analog.c \
        #{ARDUINO}/hardware/cores/arduino/wiring_digital.c \
        #{ARDUINO}/hardware/cores/arduino/wiring_pulse.c \
        #{ARDUINO}/hardware/cores/arduino/wiring_serial.c \
        #{ARDUINO}/hardware/cores/arduino/wiring_shift.c \
        #{ARDUINO}/hardware/cores/arduino/WInterrupts.c"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/pins_arduino.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring_analog.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring_digital.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring_pulse.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring_serial.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/wiring_shift.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/WInterrupts.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/HardwareSerial.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/libraries/SoftwareSerial/SoftwareSerial.o"
    sh "avr-ar rcs core.a #{ARDUINO}/hardware/cores/arduino/Print.o"
end